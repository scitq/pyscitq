# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from . import taskqueue_pb2 as taskqueue__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in taskqueue_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TaskQueueStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/taskqueue.TaskQueue/SubmitTask',
                request_serializer=taskqueue__pb2.TaskRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.RegisterWorker = channel.unary_unary(
                '/taskqueue.TaskQueue/RegisterWorker',
                request_serializer=taskqueue__pb2.WorkerInfo.SerializeToString,
                response_deserializer=taskqueue__pb2.WorkerId.FromString,
                _registered_method=True)
        self.PingAndTakeNewTasks = channel.unary_unary(
                '/taskqueue.TaskQueue/PingAndTakeNewTasks',
                request_serializer=taskqueue__pb2.PingAndGetNewTasksRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.TaskListAndOther.FromString,
                _registered_method=True)
        self.UpdateTaskStatus = channel.unary_unary(
                '/taskqueue.TaskQueue/UpdateTaskStatus',
                request_serializer=taskqueue__pb2.TaskStatusUpdate.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.SendTaskLogs = channel.stream_unary(
                '/taskqueue.TaskQueue/SendTaskLogs',
                request_serializer=taskqueue__pb2.TaskLog.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.StreamTaskLogs = channel.unary_stream(
                '/taskqueue.TaskQueue/StreamTaskLogs',
                request_serializer=taskqueue__pb2.TaskId.SerializeToString,
                response_deserializer=taskqueue__pb2.TaskLog.FromString,
                _registered_method=True)
        self.ListTasks = channel.unary_unary(
                '/taskqueue.TaskQueue/ListTasks',
                request_serializer=taskqueue__pb2.ListTasksRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.TaskList.FromString,
                _registered_method=True)
        self.ListWorkers = channel.unary_unary(
                '/taskqueue.TaskQueue/ListWorkers',
                request_serializer=taskqueue__pb2.ListWorkersRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.WorkersList.FromString,
                _registered_method=True)
        self.CreateWorker = channel.unary_unary(
                '/taskqueue.TaskQueue/CreateWorker',
                request_serializer=taskqueue__pb2.WorkerRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.WorkerIds.FromString,
                _registered_method=True)
        self.UpdateWorkerStatus = channel.unary_unary(
                '/taskqueue.TaskQueue/UpdateWorkerStatus',
                request_serializer=taskqueue__pb2.WorkerStatus.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.DeleteWorker = channel.unary_unary(
                '/taskqueue.TaskQueue/DeleteWorker',
                request_serializer=taskqueue__pb2.WorkerId.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.UpdateWorker = channel.unary_unary(
                '/taskqueue.TaskQueue/UpdateWorker',
                request_serializer=taskqueue__pb2.WorkerUpdateRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.ListJobs = channel.unary_unary(
                '/taskqueue.TaskQueue/ListJobs',
                request_serializer=taskqueue__pb2.ListJobsRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.JobsList.FromString,
                _registered_method=True)
        self.ListFlavors = channel.unary_unary(
                '/taskqueue.TaskQueue/ListFlavors',
                request_serializer=taskqueue__pb2.ListFlavorsRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.FlavorsList.FromString,
                _registered_method=True)
        self.GetRcloneConfig = channel.unary_unary(
                '/taskqueue.TaskQueue/GetRcloneConfig',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=taskqueue__pb2.RcloneConfig.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/taskqueue.TaskQueue/Login',
                request_serializer=taskqueue__pb2.LoginRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.CreateUser = channel.unary_unary(
                '/taskqueue.TaskQueue/CreateUser',
                request_serializer=taskqueue__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.ListUsers = channel.unary_unary(
                '/taskqueue.TaskQueue/ListUsers',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=taskqueue__pb2.UsersList.FromString,
                _registered_method=True)
        self.DeleteUser = channel.unary_unary(
                '/taskqueue.TaskQueue/DeleteUser',
                request_serializer=taskqueue__pb2.UserId.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.UpdateUser = channel.unary_unary(
                '/taskqueue.TaskQueue/UpdateUser',
                request_serializer=taskqueue__pb2.User.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.ChangePassword = channel.unary_unary(
                '/taskqueue.TaskQueue/ChangePassword',
                request_serializer=taskqueue__pb2.ChangePasswordRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.ListRecruiters = channel.unary_unary(
                '/taskqueue.TaskQueue/ListRecruiters',
                request_serializer=taskqueue__pb2.RecruiterFilter.SerializeToString,
                response_deserializer=taskqueue__pb2.RecruiterList.FromString,
                _registered_method=True)
        self.CreateRecruiter = channel.unary_unary(
                '/taskqueue.TaskQueue/CreateRecruiter',
                request_serializer=taskqueue__pb2.Recruiter.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.UpdateRecruiter = channel.unary_unary(
                '/taskqueue.TaskQueue/UpdateRecruiter',
                request_serializer=taskqueue__pb2.RecruiterUpdate.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.DeleteRecruiter = channel.unary_unary(
                '/taskqueue.TaskQueue/DeleteRecruiter',
                request_serializer=taskqueue__pb2.RecruiterId.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.ListWorkflows = channel.unary_unary(
                '/taskqueue.TaskQueue/ListWorkflows',
                request_serializer=taskqueue__pb2.WorkflowFilter.SerializeToString,
                response_deserializer=taskqueue__pb2.WorkflowList.FromString,
                _registered_method=True)
        self.CreateWorkflow = channel.unary_unary(
                '/taskqueue.TaskQueue/CreateWorkflow',
                request_serializer=taskqueue__pb2.WorkflowRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.WorkflowId.FromString,
                _registered_method=True)
        self.DeleteWorkflow = channel.unary_unary(
                '/taskqueue.TaskQueue/DeleteWorkflow',
                request_serializer=taskqueue__pb2.WorkflowId.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.ListSteps = channel.unary_unary(
                '/taskqueue.TaskQueue/ListSteps',
                request_serializer=taskqueue__pb2.WorkflowId.SerializeToString,
                response_deserializer=taskqueue__pb2.StepList.FromString,
                _registered_method=True)
        self.CreateStep = channel.unary_unary(
                '/taskqueue.TaskQueue/CreateStep',
                request_serializer=taskqueue__pb2.StepRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.StepId.FromString,
                _registered_method=True)
        self.DeleteStep = channel.unary_unary(
                '/taskqueue.TaskQueue/DeleteStep',
                request_serializer=taskqueue__pb2.StepId.SerializeToString,
                response_deserializer=taskqueue__pb2.Ack.FromString,
                _registered_method=True)
        self.GetWorkerStats = channel.unary_unary(
                '/taskqueue.TaskQueue/GetWorkerStats',
                request_serializer=taskqueue__pb2.GetWorkerStatsRequest.SerializeToString,
                response_deserializer=taskqueue__pb2.GetWorkerStatsResponse.FromString,
                _registered_method=True)


class TaskQueueServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubmitTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PingAndTakeNewTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendTaskLogs(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamTaskLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFlavors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRcloneConfig(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangePassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRecruiters(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRecruiter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRecruiter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRecruiter(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkflows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSteps(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteStep(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkerStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaskQueueServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=taskqueue__pb2.TaskRequest.FromString,
                    response_serializer=taskqueue__pb2.TaskResponse.SerializeToString,
            ),
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=taskqueue__pb2.WorkerInfo.FromString,
                    response_serializer=taskqueue__pb2.WorkerId.SerializeToString,
            ),
            'PingAndTakeNewTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.PingAndTakeNewTasks,
                    request_deserializer=taskqueue__pb2.PingAndGetNewTasksRequest.FromString,
                    response_serializer=taskqueue__pb2.TaskListAndOther.SerializeToString,
            ),
            'UpdateTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTaskStatus,
                    request_deserializer=taskqueue__pb2.TaskStatusUpdate.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'SendTaskLogs': grpc.stream_unary_rpc_method_handler(
                    servicer.SendTaskLogs,
                    request_deserializer=taskqueue__pb2.TaskLog.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'StreamTaskLogs': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamTaskLogs,
                    request_deserializer=taskqueue__pb2.TaskId.FromString,
                    response_serializer=taskqueue__pb2.TaskLog.SerializeToString,
            ),
            'ListTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTasks,
                    request_deserializer=taskqueue__pb2.ListTasksRequest.FromString,
                    response_serializer=taskqueue__pb2.TaskList.SerializeToString,
            ),
            'ListWorkers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkers,
                    request_deserializer=taskqueue__pb2.ListWorkersRequest.FromString,
                    response_serializer=taskqueue__pb2.WorkersList.SerializeToString,
            ),
            'CreateWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorker,
                    request_deserializer=taskqueue__pb2.WorkerRequest.FromString,
                    response_serializer=taskqueue__pb2.WorkerIds.SerializeToString,
            ),
            'UpdateWorkerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkerStatus,
                    request_deserializer=taskqueue__pb2.WorkerStatus.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'DeleteWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorker,
                    request_deserializer=taskqueue__pb2.WorkerId.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'UpdateWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorker,
                    request_deserializer=taskqueue__pb2.WorkerUpdateRequest.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'ListJobs': grpc.unary_unary_rpc_method_handler(
                    servicer.ListJobs,
                    request_deserializer=taskqueue__pb2.ListJobsRequest.FromString,
                    response_serializer=taskqueue__pb2.JobsList.SerializeToString,
            ),
            'ListFlavors': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFlavors,
                    request_deserializer=taskqueue__pb2.ListFlavorsRequest.FromString,
                    response_serializer=taskqueue__pb2.FlavorsList.SerializeToString,
            ),
            'GetRcloneConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRcloneConfig,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=taskqueue__pb2.RcloneConfig.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=taskqueue__pb2.LoginRequest.FromString,
                    response_serializer=taskqueue__pb2.LoginResponse.SerializeToString,
            ),
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=taskqueue__pb2.CreateUserRequest.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'ListUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUsers,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=taskqueue__pb2.UsersList.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=taskqueue__pb2.UserId.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=taskqueue__pb2.User.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'ChangePassword': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangePassword,
                    request_deserializer=taskqueue__pb2.ChangePasswordRequest.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'ListRecruiters': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRecruiters,
                    request_deserializer=taskqueue__pb2.RecruiterFilter.FromString,
                    response_serializer=taskqueue__pb2.RecruiterList.SerializeToString,
            ),
            'CreateRecruiter': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecruiter,
                    request_deserializer=taskqueue__pb2.Recruiter.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'UpdateRecruiter': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRecruiter,
                    request_deserializer=taskqueue__pb2.RecruiterUpdate.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'DeleteRecruiter': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRecruiter,
                    request_deserializer=taskqueue__pb2.RecruiterId.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'ListWorkflows': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkflows,
                    request_deserializer=taskqueue__pb2.WorkflowFilter.FromString,
                    response_serializer=taskqueue__pb2.WorkflowList.SerializeToString,
            ),
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=taskqueue__pb2.WorkflowRequest.FromString,
                    response_serializer=taskqueue__pb2.WorkflowId.SerializeToString,
            ),
            'DeleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkflow,
                    request_deserializer=taskqueue__pb2.WorkflowId.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'ListSteps': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSteps,
                    request_deserializer=taskqueue__pb2.WorkflowId.FromString,
                    response_serializer=taskqueue__pb2.StepList.SerializeToString,
            ),
            'CreateStep': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateStep,
                    request_deserializer=taskqueue__pb2.StepRequest.FromString,
                    response_serializer=taskqueue__pb2.StepId.SerializeToString,
            ),
            'DeleteStep': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteStep,
                    request_deserializer=taskqueue__pb2.StepId.FromString,
                    response_serializer=taskqueue__pb2.Ack.SerializeToString,
            ),
            'GetWorkerStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkerStats,
                    request_deserializer=taskqueue__pb2.GetWorkerStatsRequest.FromString,
                    response_serializer=taskqueue__pb2.GetWorkerStatsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'taskqueue.TaskQueue', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('taskqueue.TaskQueue', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TaskQueue(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/SubmitTask',
            taskqueue__pb2.TaskRequest.SerializeToString,
            taskqueue__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/RegisterWorker',
            taskqueue__pb2.WorkerInfo.SerializeToString,
            taskqueue__pb2.WorkerId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PingAndTakeNewTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/PingAndTakeNewTasks',
            taskqueue__pb2.PingAndGetNewTasksRequest.SerializeToString,
            taskqueue__pb2.TaskListAndOther.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/UpdateTaskStatus',
            taskqueue__pb2.TaskStatusUpdate.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendTaskLogs(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/taskqueue.TaskQueue/SendTaskLogs',
            taskqueue__pb2.TaskLog.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamTaskLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/taskqueue.TaskQueue/StreamTaskLogs',
            taskqueue__pb2.TaskId.SerializeToString,
            taskqueue__pb2.TaskLog.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListTasks',
            taskqueue__pb2.ListTasksRequest.SerializeToString,
            taskqueue__pb2.TaskList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListWorkers',
            taskqueue__pb2.ListWorkersRequest.SerializeToString,
            taskqueue__pb2.WorkersList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/CreateWorker',
            taskqueue__pb2.WorkerRequest.SerializeToString,
            taskqueue__pb2.WorkerIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/UpdateWorkerStatus',
            taskqueue__pb2.WorkerStatus.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/DeleteWorker',
            taskqueue__pb2.WorkerId.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/UpdateWorker',
            taskqueue__pb2.WorkerUpdateRequest.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListJobs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListJobs',
            taskqueue__pb2.ListJobsRequest.SerializeToString,
            taskqueue__pb2.JobsList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFlavors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListFlavors',
            taskqueue__pb2.ListFlavorsRequest.SerializeToString,
            taskqueue__pb2.FlavorsList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRcloneConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/GetRcloneConfig',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            taskqueue__pb2.RcloneConfig.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/Login',
            taskqueue__pb2.LoginRequest.SerializeToString,
            taskqueue__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/CreateUser',
            taskqueue__pb2.CreateUserRequest.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListUsers',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            taskqueue__pb2.UsersList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/DeleteUser',
            taskqueue__pb2.UserId.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/UpdateUser',
            taskqueue__pb2.User.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangePassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ChangePassword',
            taskqueue__pb2.ChangePasswordRequest.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListRecruiters(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListRecruiters',
            taskqueue__pb2.RecruiterFilter.SerializeToString,
            taskqueue__pb2.RecruiterList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateRecruiter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/CreateRecruiter',
            taskqueue__pb2.Recruiter.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRecruiter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/UpdateRecruiter',
            taskqueue__pb2.RecruiterUpdate.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRecruiter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/DeleteRecruiter',
            taskqueue__pb2.RecruiterId.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListWorkflows',
            taskqueue__pb2.WorkflowFilter.SerializeToString,
            taskqueue__pb2.WorkflowList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/CreateWorkflow',
            taskqueue__pb2.WorkflowRequest.SerializeToString,
            taskqueue__pb2.WorkflowId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/DeleteWorkflow',
            taskqueue__pb2.WorkflowId.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListSteps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/ListSteps',
            taskqueue__pb2.WorkflowId.SerializeToString,
            taskqueue__pb2.StepList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/CreateStep',
            taskqueue__pb2.StepRequest.SerializeToString,
            taskqueue__pb2.StepId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteStep(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/DeleteStep',
            taskqueue__pb2.StepId.SerializeToString,
            taskqueue__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkerStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/taskqueue.TaskQueue/GetWorkerStats',
            taskqueue__pb2.GetWorkerStatsRequest.SerializeToString,
            taskqueue__pb2.GetWorkerStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
